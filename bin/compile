#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

# config
LP_DIR=`cd $(dirname $0); cd ..; pwd`

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

NAME=$($BIN_DIR/detect $BUILD_DIR)
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}
VENDORED_MEMCACHED="http://cl.ly/0a191R3K160t1w1P0N25/vendor-libmemcached.tar.gz"

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

cd $BUILD_DIR

# reject a non-packaged Django app
if [ "$NAME" = "Python" ]; then
  [ -f manage.py ] && [ -f settings.py ] && { echo " !     Django app must be in a package subdirectory"; exit 1; }
fi


# copy artifacts out of cache if exists
mkdir -p $CACHE_DIR

# create set-aside .heroku folder.
rm -rf .heroku
mkdir .heroku

# if pylibmc within requirements, use vendored libmemcached
if [ -f requirements.txt ]; then
  if (grep -Fxiq "pylibmc" requirements.txt) || (grep -Fiq "pylibmc=" requirements.txt)
  then
    echo "-----> Noticed pylibmc. Bootstrapping libmemcached."
    cd .heroku

    if [ -d "vendor/lib/sasl2" ]; then
      export LIBMEMCACHED=$(pwd)/vendor
    else
      curl -s -L -O $VENDORED_MEMCACHED
      tar -zxvf vendor-libmemcached.tar.gz > /dev/null
      rm vendor-libmemcached.tar.gz
      export LIBMEMCACHED=$(pwd)/vendor
    fi

    export LIBMEMCACHED=$(pwd)/vendor
    cd ..
  fi
fi

if [ -f requirements.txt ]; then
  if (grep -Fiq "hg+" requirements.txt) then
    PIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE pip install $PIP_OPTS mercurial | indent
  fi
fi

if [ -f requirements.txt ];
then
	echo "-----> Installing dependencies using pip version $(bin/pip --version | awk '{print $2}')"
	PIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE pip install $PIP_OPTS -r requirements.txt | indent
fi

PYTHON_VERSION=${PYTHON_VERSION:-2.7}
export PYTHONUSERBASE=/app/.python
export PYTHONUNBUFFERED=True
APYBIN=/opt/ActivePython-$PYTHON_VERSION/bin

$APYBIN/pip install sphinx $PIP_OPTS
$APYBIN/pip install oauth2==1.5.211 Flask==0.8 Flask-OpenID==1.0.1 python-openid==2.2.5 $PIP_OPTS
CONF_FILE=$(find . -name 'conf.py' | head -1)
PROJECT=$(dirname $CONF_FILE)
pushd $PROJECT
make html
popd

rm -rf $CACHE_DIR/.heroku
mkdir -p $CACHE_DIR/.heroku
mkdir $ROOT_DIR/src/app/templates
mv $ROOT_DIR/src/app $CACHE_DIR/.heroku/
mv $PROJECT/_build/html/* $CACHE_DIR/.heroku/app/templates/
cp -R $CACHE_DIR/.heroku .

# repack cache
mkdir -p $CACHE_DIR
rm -rf $CACHE_DIR/.heroku
cp -R .heroku $CACHE_DIR/.heroku

